// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using eItems.Catalog.Data;

#nullable disable

namespace eItems.Catalog.Migrations
{
    [DbContext(typeof(CatalogContext))]
    [Migration("20250408225707_Initial Mig")]
    partial class InitialMig
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("catalog")
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AssetLanguageDescr", b =>
                {
                    b.Property<Guid>("AssetId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LanguageDescrId")
                        .HasColumnType("uuid");

                    b.HasKey("AssetId", "LanguageDescrId");

                    b.HasIndex("LanguageDescrId");

                    b.ToTable("AssetLanguageDescr", "catalog");
                });

            modelBuilder.Entity("eItems.Catalog.Data.Model.Asset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("AssetCD")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AssetImage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CostCenterID")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("LocationID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ManufacturerID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<int>("SubNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CostCenterID");

                    b.HasIndex("LocationID");

                    b.HasIndex("ManufacturerID");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Asset", "catalog");
                });

            modelBuilder.Entity("eItems.Catalog.Data.Model.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("CompanyCD")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CountryID")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("TenantID")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CountryID");

                    b.HasIndex("TenantID");

                    b.ToTable("Company", "catalog");
                });

            modelBuilder.Entity("eItems.Catalog.Data.Model.CostCenter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("CostCenterCD")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CostCenter", "catalog");
                });

            modelBuilder.Entity("eItems.Catalog.Data.Model.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CountryCD")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Country", "catalog");
                });

            modelBuilder.Entity("eItems.Catalog.Data.Model.LanguageDescr", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("LanguageCD")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LanguageDescr", "catalog");
                });

            modelBuilder.Entity("eItems.Catalog.Data.Model.License", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("LicenseCD")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("License", "catalog");
                });

            modelBuilder.Entity("eItems.Catalog.Data.Model.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("LocationCD")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OrganizationID")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationID");

                    b.ToTable("Location", "catalog");
                });

            modelBuilder.Entity("eItems.Catalog.Data.Model.Manufacturer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("ManufacturerCD")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Manufacturer", "catalog");
                });

            modelBuilder.Entity("eItems.Catalog.Data.Model.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("CompanyCD")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CompanyID")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyID");

                    b.ToTable("Organization", "catalog");
                });

            modelBuilder.Entity("eItems.Catalog.Data.Model.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("LicenseID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TenantCD")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TenantName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LicenseID");

                    b.ToTable("Tenant", "catalog");
                });

            modelBuilder.Entity("AssetLanguageDescr", b =>
                {
                    b.HasOne("eItems.Catalog.Data.Model.Asset", null)
                        .WithMany()
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eItems.Catalog.Data.Model.LanguageDescr", null)
                        .WithMany()
                        .HasForeignKey("LanguageDescrId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eItems.Catalog.Data.Model.Asset", b =>
                {
                    b.HasOne("eItems.Catalog.Data.Model.CostCenter", "CostCenter")
                        .WithMany("Assets")
                        .HasForeignKey("CostCenterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eItems.Catalog.Data.Model.Location", "Location")
                        .WithMany("Assets")
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eItems.Catalog.Data.Model.Manufacturer", "Manufacturer")
                        .WithMany("Assets")
                        .HasForeignKey("ManufacturerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eItems.Catalog.Data.Model.Organization", null)
                        .WithMany("Assets")
                        .HasForeignKey("OrganizationId");

                    b.Navigation("CostCenter");

                    b.Navigation("Location");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("eItems.Catalog.Data.Model.Company", b =>
                {
                    b.HasOne("eItems.Catalog.Data.Model.Country", "Country")
                        .WithMany("Companies")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eItems.Catalog.Data.Model.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("eItems.Catalog.Data.Model.Location", b =>
                {
                    b.HasOne("eItems.Catalog.Data.Model.Organization", "Organization")
                        .WithMany("Locations")
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("eItems.Catalog.Data.Model.Organization", b =>
                {
                    b.HasOne("eItems.Catalog.Data.Model.Company", "Company")
                        .WithMany("Organizations")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("eItems.Catalog.Data.Model.Tenant", b =>
                {
                    b.HasOne("eItems.Catalog.Data.Model.License", null)
                        .WithMany("Tenants")
                        .HasForeignKey("LicenseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eItems.Catalog.Data.Model.Company", b =>
                {
                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("eItems.Catalog.Data.Model.CostCenter", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("eItems.Catalog.Data.Model.Country", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("eItems.Catalog.Data.Model.License", b =>
                {
                    b.Navigation("Tenants");
                });

            modelBuilder.Entity("eItems.Catalog.Data.Model.Location", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("eItems.Catalog.Data.Model.Manufacturer", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("eItems.Catalog.Data.Model.Organization", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Locations");
                });
#pragma warning restore 612, 618
        }
    }
}
